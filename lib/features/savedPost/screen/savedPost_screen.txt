import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:randomy/core/common/error_text.dart';
import 'package:randomy/core/common/loader.dart';
import 'package:randomy/core/common/post_card.dart';
import 'package:randomy/features/auth/controlller/auth_controller.dart';
import 'package:randomy/features/user_profile/controller/user_profile_controller.dart';
import 'package:routemaster/routemaster.dart';
/*class SavedPostsPage extends StatelessWidget {
  final List<SavedPost> savedPosts;

  const SavedPostsPage({required this.savedPosts});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Saved Posts'),
      ),
      body: ListView.builder(
        itemCount: savedPosts.length,
        itemBuilder: (context, index) {
          final savedPost = savedPosts[index];
          return PostCard(post: post)
        },
      ),
    );
  }
}

class SavedPost {
  final String postId;
  final String timestamp;

  SavedPost({required this.postId, required this.timestamp});
}*/



class savedPostscreen extends ConsumerWidget {
  final String uid;
  const savedPostscreen({
    super.key,
    required this.uid,
  });

  void navigateToEditUser(BuildContext context) {
  //  Routemaster.of(context).push('/edit-profile/$uid');
  }

  @override
  Widget build(BuildContext context, WidgetRef ref) {
     final user = ref.watch(userProvider)!;
     
     final isGuest = !user.isAuthenticated;
    return Scaffold(
      body: ref.watch(getUserDataProvider(uid)).when(
            data: (user) => NestedScrollView(
              headerSliverBuilder: (context, innerBoxIsScrolled) {
                return [
                  SliverAppBar(
                    expandedHeight: 250,
                    floating: true,
                    snap: true,
                    flexibleSpace: Stack(
                      children: [
                        Positioned.fill(
                          child: Image.network(
                            user.banner,
                            fit: BoxFit.cover,
                          ),
                        ),
                        Container(
                          alignment: Alignment.bottomLeft,
                          padding: const EdgeInsets.all(20).copyWith(bottom: 70),
                          child: CircleAvatar(
                            backgroundImage: NetworkImage(user.profilePic),
                            radius: 45,
                          ),
                        ),
                     
                      ],
                    ),
                  ),
                  SliverPadding(
                    padding: const EdgeInsets.all(16),
                    sliver: SliverList(
                      delegate: SliverChildListDelegate(
                        [
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Text(
                                'u/${user.name} saved posts',
                                style: const TextStyle(
                                  fontSize: 19,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ],
                          ),
                          
                          const SizedBox(height: 10),
                          const Divider(thickness: 2),
                        ],
                      ),
                    ),
                  ),
                ];
              },
              body: ref.watch(getUserPostsProvider(uid)).when(
                    data: (data) {
                      return ListView.builder(
                        itemCount: data.length,
                        itemBuilder: (BuildContext context, int index) {
                          final post = data[index];
                          return PostCard(post: post);
                        },
                      );
                    },
                    error: (error, stackTrace) {
                     
                      return ErrorText(error: error.toString());
                    },
                    loading: () => const Loader(),
                  ),
            ),
            error: (error, stackTrace) => ErrorText(error: error.toString()),
            loading: () => const Loader(),
          ),
    );
  }
}